(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{237:function(s,t,a){"use strict";a.r(t);var e=a(0),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子查询","aria-hidden":"true"}},[s._v("#")]),s._v(" 子查询")]),s._v(" "),a("p",[s._v("子查询(SubQuery)是指出现在其他 SQL 语句内的 SELECT 子句。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" col1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" col2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 其中，SELECT * FROM t1 称为 Outer Query/Outer Statement")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# SELECT col2 FROM t2 称为 SubQuery")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("子查询指嵌套在查询内部，且必须始终出现在圆括号内")]),s._v(" "),a("li",[s._v("子查询可以包含多个关键字或条件，如 DISTINCT、GROUP BY、ORDER BY、LIMIT、函数等")]),s._v(" "),a("li",[s._v("子查询的外层查询可以是：SELECT, INSERT, UPDATE, SET, DO")]),s._v(" "),a("li",[s._v("子查询可以返回标量、一行、一列、子查询")])]),s._v(" "),a("p",[s._v("子查询可以依据执行的次数划分为"),a("strong",[s._v("非关联子查询")]),s._v("和"),a("strong",[s._v("关联子查询")]),s._v("。（"),a("strong",[s._v("非关联子查询")]),s._v("与主查询的执行无关，只需要执行一次即可；而"),a("strong",[s._v("关联子查询")]),s._v("，则需要将主查询的字段值传入子查询中进行关联查询。）")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("非关联子查询")]),s._v("：子查询从数据表中查询了数据结果，如果这个数据结果只执行一次，然后这个数据结果作为主查询的条件进行执行，那么这样的子查询叫做"),a("strong",[s._v("非关联子查询")]),s._v("。")]),s._v(" "),a("li",[a("strong",[s._v("关联子查询")]),s._v("：同样，如果子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查询，然后再将结果反馈给外部，这种嵌套的执行方式就称为"),a("strong",[s._v("关联子查询")]),s._v("。")])]),s._v(" "),a("h3",{attrs:{id:"exists-子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exists-子查询","aria-hidden":"true"}},[s._v("#")]),s._v(" EXISTS 子查询")]),s._v(" "),a("p",[s._v("关联子查询通常也会和 "),a("code",[s._v("EXISTS")]),s._v(" 一起来使用，"),a("code",[s._v("EXISTS")]),s._v(" 子查询用来判断条件是否满足，满足的话为 "),a("code",[s._v("True")]),s._v("，不满足为 "),a("code",[s._v("False")]),s._v("。同样，"),a("code",[s._v("NOT EXISTS")]),s._v(" 是不存在的意思。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查询出场过的球员都有哪些，并且显示他们的姓名、球员 ID 和球队 ID")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" player_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("team_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("player_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXISTS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" player_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player_score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" player"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("player_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("player_score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("player_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"使用比较运算符的子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用比较运算符的子查询","aria-hidden":"true"}},[s._v("#")]),s._v(" 使用比较运算符的子查询")]),s._v(" "),a("p",[s._v("比较运算符："),a("code",[s._v("=")]),s._v("、"),a("code",[s._v(">")]),s._v("、"),a("code",[s._v(">=")]),s._v("、"),a("code",[s._v("<")]),s._v("、"),a("code",[s._v("<=")]),s._v("、"),a("code",[s._v("!=")]),s._v("、"),a("code",[s._v("<>")]),s._v("、"),a("code",[s._v("<=>")])]),s._v(" "),a("p",[s._v("语法结构：operand comparison_operator [ANY | SOME | ALL] (subquery)")]),s._v(" "),a("p",[s._v("用 "),a("code",[s._v("ANY")]),s._v(", "),a("code",[s._v("SOME")]),s._v(", "),a("code",[s._v("ALL")]),s._v(" 修饰（"),a("code",[s._v("ANY")]),s._v(" 与 "),a("code",[s._v("SOME")]),s._v(" 相同）")]),s._v(" "),a("h3",{attrs:{id:"集合比较子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合比较子查询","aria-hidden":"true"}},[s._v("#")]),s._v(" 集合比较子查询")]),s._v(" "),a("p",[s._v("集合比较子查询的作用是与另一个查询结果集进行比较，我们可以在子查询中使用 "),a("code",[s._v("IN")]),s._v("、"),a("code",[s._v("ANY")]),s._v("、"),a("code",[s._v("ALL")]),s._v(" 和 "),a("code",[s._v("SOME")]),s._v(" 操作符")]),s._v(" "),a("p",[s._v("语法结构：operand comparison_operator [[NOT] IN] (subquery)")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("操作符")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("IN")]),s._v(" "),a("td",[s._v("判断是否在集合中")])]),s._v(" "),a("tr",[a("td",[s._v("ANY")]),s._v(" "),a("td",[a("strong",[s._v("需要与比较操作符一起使用")]),s._v("，与子查询返回的"),a("strong",[s._v("任何值")]),s._v("做比较")])]),s._v(" "),a("tr",[a("td",[s._v("ALL")]),s._v(" "),a("td",[a("strong",[s._v("需要与比较操作符一起使用")]),s._v("，与子查询返回的"),a("strong",[s._v("所有值")]),s._v("做比较")])]),s._v(" "),a("tr",[a("td",[s._v("SOME")]),s._v(" "),a("td",[s._v("实际上是 ANY 的别名，作用相同，一般常用 ANY")])])])]),s._v(" "),a("p",[a("code",[s._v("=ANY")]),s._v(" 或 "),a("code",[s._v("=SOME")]),s._v(" 与 "),a("code",[s._v("IN")]),s._v(" 等效；"),a("code",[s._v("!=ALL")]),s._v(" 或 "),a("code",[s._v("<>ALL")]),s._v(" 与 "),a("code",[s._v("NOT IN")]),s._v(" 等效")]),s._v(" "),a("p",[a("img",{attrs:{src:"/mysql-subquery-any-some-all.jpg",alt:"子查询"}})]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查询出场过的球员都有哪些，并且显示他们的姓名、球员 ID 和球队 ID")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" player_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("team_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("player_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" player_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" player_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player_score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查询球员表中，比印第安纳步行者（对应的 team_id 为 1002）中任意一个球员身高高的球员信息，并且输出他们的球员 ID、球员姓名和球员身高")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" player_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("player_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("height "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" height "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ANY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" height "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" team_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1002")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" player_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("player_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("height "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" height "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("MIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" team_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1002")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查询球员表中，比印第安纳步行者（对应的 team_id 为 1002）中所有球员身高都高的球员的信息，并且输出球员 ID、球员姓名和球员身高")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" player_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("player_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("height "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" height "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" height "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" team_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1002")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" player_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("player_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("height "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" height "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" team_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1002")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"子查询作为主查询的计算字段-列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子查询作为主查询的计算字段-列","aria-hidden":"true"}},[s._v("#")]),s._v(" 子查询作为主查询的计算字段(列)")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查询每个球队的球员数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" team_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("team_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" player"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("team_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("team"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("team_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" player_num "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" team"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("div",{staticClass:"tip custom-block"},[a("h3",{attrs:{id:"exists-和-in-子查询效率的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exists-和-in-子查询效率的比较","aria-hidden":"true"}},[s._v("#")]),s._v(" "),a("code",[s._v("EXISTS")]),s._v(" 和 "),a("code",[s._v("IN")]),s._v(" 子查询效率的比较")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" A "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" cc "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" cc "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" A "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXISTS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" cc "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" B "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("cc"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("cc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("A 表，又叫主表、外表；B 表，又叫从表、内表")]),s._v(" "),a("p",[s._v("实际上在查询过程中，在我们对 cc 列建立索引的情况下，我们还需要判断表 A 和表 B 的大小。如果表 A 比表 B 大，那么 "),a("code",[s._v("IN")]),s._v(" 子查询的效率要比 "),a("code",[s._v("EXISTS")]),s._v(" 子查询效率高，因为这时 B 表中如果对 cc 列进行了索引，那么 "),a("code",[s._v("IN")]),s._v(" 子查询的效率就会比较高。")]),s._v(" "),a("p",[s._v("同样，如果表 A 比表 B 小，那么使用 "),a("code",[s._v("EXISTS")]),s._v(" 子查询效率会更高，因为我们可以使用到 A 表中对 cc 列的索引，而不用从 B 中进行 cc 列的查询。")]),s._v(" "),a("ul",[a("li",[s._v("当查询字段进行了索引时，主表 A 大于从表 B，使用 "),a("code",[s._v("IN")]),s._v(" 子查询效率更高")]),s._v(" "),a("li",[s._v("相反主表 A 小于从表 B 时，使用 "),a("code",[s._v("EXISTS")]),s._v(" 子查询效率更高")])]),s._v(" "),a("h4",{attrs:{id:"小表驱动大表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小表驱动大表","aria-hidden":"true"}},[s._v("#")]),s._v(" 小表驱动大表")]),s._v(" "),a("p",[s._v("哪个表小就用哪个表来驱动，A 表小就用 "),a("code",[s._v("EXISTS")]),s._v(" （主小从大），B 表小就用 "),a("code",[s._v("IN")]),s._v(" （主大从小，大表 IN 小表）。")]),s._v(" "),a("p",[s._v("当 A 小于 B 时，用 "),a("code",[s._v("EXISTS")]),s._v("。因为 "),a("code",[s._v("EXISTS")]),s._v(" 的实现，相当于外表循环，实现的逻辑类似于：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("for i in A\n  for j in B\n    if j.cc == i.cc then ...\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("当 B 小于 A 时，用 "),a("code",[s._v("IN")]),s._v("，因为实现的逻辑类似于：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("for i in B\n  for j in A\n    if j.cc == i.cc then ...\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"in-与-exists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in-与-exists","aria-hidden":"true"}},[s._v("#")]),s._v(" IN 与 EXISTS")]),s._v(" "),a("p",[s._v("假设 主表 A 有 n 条数据，从表 B 有 m 条数据，表 A 和表 B 中的查询字段采用 B+ 树进行索引，那么两个子查询的执行效率：")]),s._v(" "),a("ul",[a("li",[s._v("使用 "),a("code",[s._v("IN")]),s._v(": m * log(n)")]),s._v(" "),a("li",[s._v("使用 "),a("code",[s._v("EXISTS")]),s._v(": n * log(m)")])]),s._v(" "),a("p",[a("code",[s._v("IN")]),s._v(" 子查询，是"),a("strong",[s._v("从表")]),s._v("计算出来作为已知值，而 "),a("code",[s._v("EXISTS")]),s._v(" 子查询是"),a("strong",[s._v("主表")]),s._v("作为已知值传递给"),a("strong",[s._v("从表")]),s._v("。")]),s._v(" "),a("p",[s._v("对于 "),a("code",[s._v("IN")]),s._v(" 子查询，计算出来的结果作为已知值，就可以使得表 A（n 条数据）可以使用到索引，从而提升检索效率；")]),s._v(" "),a("p",[s._v("对于 "),a("code",[s._v("EXISTS")]),s._v(" 子查询，外表 A 作为已知值，传递给从表，可以利用从表 B（m 条数据）中的索引，从而提升检索效率。")]),s._v(" "),a("p",[s._v("（说明 log 代表以2为底的对数，即 B+ 树的深度）")]),s._v(" "),a("h3",{attrs:{id:"not-in-与-not-exists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#not-in-与-not-exists","aria-hidden":"true"}},[s._v("#")]),s._v(" NOT IN 与 NOT EXISTS")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("NOT IN")]),s._v(" 是先执行子查询，得到一个结果集，将结果集代入外层谓词条件执行主查询，子查询只需要执行一次；")]),s._v(" "),a("li",[a("code",[s._v("NOT EXISTS")]),s._v(" 是先从主查询中取得一条数据，再代入到子查询中，执行一次子查询，判断子查询是否能返回结果，主查询有多少条数据，子查询就要执行多少次。")])]),s._v(" "),a("p",[a("code",[s._v("IN")]),s._v(" 有一个缺陷是不能判断 "),a("code",[s._v("NULL")]),s._v("，如果字段存在 "),a("code",[s._v("NULL")]),s._v(" 值，则会进行忽略，所以最好使用 "),a("code",[s._v("NOT EXISTS")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);